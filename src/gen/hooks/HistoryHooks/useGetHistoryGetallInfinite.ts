/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { GetHistoryGetallQueryResponse } from "../../types/'HistoryController/GetHistoryGetall.ts"
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getHistoryGetallInfiniteQueryKey = () => [{ url: '/History/GetAll' }] as const

export type GetHistoryGetallInfiniteQueryKey = ReturnType<typeof getHistoryGetallInfiniteQueryKey>

/**
 * {@link /History/GetAll}
 */
export async function getHistoryGetallInfinite(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetHistoryGetallQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/History/GetAll`,
    baseURL: 'http://localhost:6513/',
    ...requestConfig,
  })
  return res
}

export function getHistoryGetallInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getHistoryGetallInfiniteQueryKey()
  return infiniteQueryOptions<
    ResponseConfig<GetHistoryGetallQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetHistoryGetallQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getHistoryGetallInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /History/GetAll}
 */
export function useGetHistoryGetallInfinite<
  TData = InfiniteData<ResponseConfig<GetHistoryGetallQueryResponse>>,
  TQueryData = ResponseConfig<GetHistoryGetallQueryResponse>,
  TQueryKey extends QueryKey = GetHistoryGetallInfiniteQueryKey,
>(
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetHistoryGetallQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getHistoryGetallInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...getHistoryGetallInfiniteQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as InfiniteQueryObserverOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}