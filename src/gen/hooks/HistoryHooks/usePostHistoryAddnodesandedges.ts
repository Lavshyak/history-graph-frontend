/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostHistoryAddnodesandedgesMutationRequest,
  PostHistoryAddnodesandedgesMutationResponse,
} from "../../types/'HistoryController/PostHistoryAddnodesandedges.ts"
import { useMutation } from '@tanstack/react-query'

export const postHistoryAddnodesandedgesMutationKey = () => [{ url: '/History/AddNodesAndEdges' }] as const

export type PostHistoryAddnodesandedgesMutationKey = ReturnType<typeof postHistoryAddnodesandedgesMutationKey>

/**
 * {@link /History/AddNodesAndEdges}
 */
export async function postHistoryAddnodesandedges(
  data: PostHistoryAddnodesandedgesMutationRequest,
  config: Partial<RequestConfig<PostHistoryAddnodesandedgesMutationRequest>> & { client?: typeof fetch } = {},
) {
  const { client: request = fetch, ...requestConfig } = config

  const requestData = data
  const res = await request<PostHistoryAddnodesandedgesMutationResponse, ResponseErrorConfig<Error>, PostHistoryAddnodesandedgesMutationRequest>({
    method: 'POST',
    url: `/History/AddNodesAndEdges`,
    baseURL: 'http://localhost:6513/',
    data: requestData,
    ...requestConfig,
    headers: { 'Content-Type': 'application/*+json', ...requestConfig.headers },
  })
  return res
}

/**
 * {@link /History/AddNodesAndEdges}
 */
export function usePostHistoryAddnodesandedges<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostHistoryAddnodesandedgesMutationResponse>,
      ResponseErrorConfig<Error>,
      { data: PostHistoryAddnodesandedgesMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostHistoryAddnodesandedgesMutationRequest>> & { client?: typeof fetch }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postHistoryAddnodesandedgesMutationKey()

  return useMutation<
    ResponseConfig<PostHistoryAddnodesandedgesMutationResponse>,
    ResponseErrorConfig<Error>,
    { data: PostHistoryAddnodesandedgesMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postHistoryAddnodesandedges(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}