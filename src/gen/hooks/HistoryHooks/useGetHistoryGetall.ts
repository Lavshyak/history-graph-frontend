/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import fetch from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { GetHistoryGetallQueryResponse } from "../../types/'HistoryController/GetHistoryGetall.ts"
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getHistoryGetallQueryKey = () => [{ url: '/History/GetAll' }] as const

export type GetHistoryGetallQueryKey = ReturnType<typeof getHistoryGetallQueryKey>

/**
 * {@link /History/GetAll}
 */
export async function getHistoryGetall(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config

  const res = await request<GetHistoryGetallQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/History/GetAll`,
    baseURL: 'http://localhost:6513/',
    ...requestConfig,
  })
  return res
}

export function getHistoryGetallQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getHistoryGetallQueryKey()
  return queryOptions<
    ResponseConfig<GetHistoryGetallQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<GetHistoryGetallQueryResponse>,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getHistoryGetall(config)
    },
  })
}

/**
 * {@link /History/GetAll}
 */
export function useGetHistoryGetall<
  TData = ResponseConfig<GetHistoryGetallQueryResponse>,
  TQueryData = ResponseConfig<GetHistoryGetallQueryResponse>,
  TQueryKey extends QueryKey = GetHistoryGetallQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<GetHistoryGetallQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof fetch }
  } = {},
) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getHistoryGetallQueryKey()

  const query = useQuery(
    {
      ...getHistoryGetallQueryOptions(config),
      queryKey,
      ...queryOptions,
    } as unknown as QueryObserverOptions,
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}